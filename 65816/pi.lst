 AS V1.42 Beta [Bld 83] - source file pi.s - page 1 - 8/6/2014 20:05:13


       1/       0 :                     ;; 65816 Pie, 65816-based Pi/e
       2/       0 :                     ;;
       3/       0 :                     ;; Mar 17, 2013
       4/       0 :                     ;;
       5/       0 :                     ;; (c) 2013, All Rights Reserved, Egan Ford (egan@sense.net)
       6/       0 :                     ;;
       7/       0 :                     ;; THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
       8/       0 :                     ;; KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
       9/       0 :                     ;; IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
      10/       0 :                     ;; PARTICULAR PURPOSE.
      11/       0 :                     ;;
      12/       0 :                     ;; 65816 Pie will compute 1000 decimal digits of Pi or e.
      13/       0 :                     ;;
      14/       0 :                     ;; All 65816 Pie computation is base 256 and then converted to base 10 for
      15/       0 :                     ;; display (technically base 100, but they both display the same).  Arrays
      16/       0 :                     ;; of bytes are used to represent multiprecision numbers.  In the comments
      17/       0 :                     ;; below "array" refers to a big endian multiprecision number.
      18/       0 :                     ;;
      19/       0 :                     ;; Assembler: Macro Assembler AS V1.42
      20/       0 :                     ;;
      21/       0 :                     
      22/       0 :                     				; Assembler: Macro Assembler AS V1.42
      23/       0 :                     	cpu	65816		; 65816/65802
      24/       0 :                     				; should work with Apple IIe w/ 65802
      25/       0 :                     				; and Apple IIgs ProDOS 8
      26/       0 :                     
      27/       0 :                     				; 8-bit mode vectors
      28/       0 : =$FDED              cout	=	$FDED		; character out sub
      29/       0 : =$FDDA              prbyte	=	$FDDA		; print a hex byte
      30/       0 : =$FD8E              crout	=	$FD8E		; CR out sub
      31/       0 : =$FF69              warm	=	$FF69		; jmp to monitor
      32/       0 :                     
      33/       0 :                     
      34/       0 :                     ;; my constants (R/O)
      35/       0 :                     
      36/       0 : =$3E8               dec_len	=	1000		; 1000 decimal digits
      37/       0 : =$D1                bin_len	=	209		; ceil(1001 / log(65536)) + 1 = 209
      38/       0 :                     				;   Duff's Device 4x unrolled loops assume
      39/       0 :                     				;   bin_len % 4 = 1
      40/       0 : =$D0                bin_end	=	bin_len-1
      41/       0 : =$1F4               bcd_len	=	dec_len/2
      42/       0 : =$35                unrollc	=	bin_len/4+(bin_len#4>0)
      43/       0 :                     
      44/       0 :                     
      45/       0 :                     ;; zeropage (R/W)
      46/       0 :                     
      47/       0 : =$0                 ptr_0	=	$0		; $0-$1 16 bit
      48/       0 : =$2                 dlength	=	$2		; $2-$3	16 bit
      49/       0 : =$4                 carry_mp =	$4		; $4-$4  8 bit multiprecision carry
      50/       0 :                     
      51/       0 :                     
      52/       0 :                     ;; direct page (R/W)
      53/       0 :                     
      54/       0 : =$800               dp	=	$800		; $800 to be direct page for computation
      55/       0 :                     
      56/       0 : =$810               ptr	=	dp+$10		; $0-$1 16 bit generic pointer
      57/       0 : =$812               ptr_mp	=	dp+$12		; $2-$3 16 bit generic pointer
      58/       0 :                     				;          32/16 div
      59/       0 : =$814               dividend =	dp+$14		; $4-$7 32 bit
      60/       0 : =$818               divisor	=	dp+$18		; $8-$9 16 bit



      61/       0 :                     
      62/       0 : =$820               n	=	dp+$20		; $10-$11  16 bit
      63/       0 : =$822               ptr_a	=	dp+$22		; $12-$13  16 bit
      64/       0 :                     
      65/       0 : =$82E               regy	=	dp+$2E
      66/       0 : =$830               regx	=	dp+$30		;  $E-$E    8 bit
      67/       0 : =$832               x2	=	dp+$32		;  $D-$F    8 bit, x^2 if x < 16
      68/       0 :                     
      69/       0 :                     
      70/       0 :                     
      71/       0 :                     ;; start of global macros
      72/       0 :                     
      73/       0 :                     mset	macro	ptr, value	; a = x
      74/       0 :                     	lda	ptr
      75/       0 :                     	ldx	value
      76/       0 :                     	jsr	set_mp
      77/       0 :                     	endm
      78/       0 :                     
      79/       0 :                     mcopy	macro	a, b		; a = b
      80/       0 :                     	ldy	a		; Y = dest
      81/       0 :                     	ldx	b		; X = source
      82/       0 :                     	lda	#(bin_len*2)-1	; bytes to copy - 1
      83/       0 :                     	mvn	0,0		; copy block
      84/       0 :                     	endm
      85/       0 :                     
      86/       0 :                     madd	macro	a, b		; a = a + b
      87/       0 :                     	lda	a
      88/       0 :                     	sta	ptr
      89/       0 :                     	lda	b
      90/       0 :                     	sta	ptr_mp
      91/       0 :                     	jsr	add_mp
      92/       0 :                     	endm
      93/       0 :                     
      94/       0 :                     msub	macro	a, b		; a = a - b
      95/       0 :                     	lda	a
      96/       0 :                     	sta	ptr
      97/       0 :                     	lda	b
      98/       0 :                     	sta	ptr_mp
      99/       0 :                     	jsr	sub_mp
     100/       0 :                     	endm
     101/       0 :                     
     102/       0 :                     masl	macro	a		; a = a * 2
     103/       0 :                     	lda	a
     104/       0 :                     	sta	ptr
     105/       0 :                     	jsr	asl_mp
     106/       0 :                     	endm
     107/       0 :                     
     108/       0 :                     mdiv	macro	ptr, value	; a = a / x
     109/       0 :                     	lda	ptr
     110/       0 :                     	ldx	value
     111/       0 :                     	jsr	div_mp
     112/       0 :                     	endm
     113/       0 :                     
     114/       0 :                     matan	macro	ptr, value	; a = a / x
     115/       0 :                     	lda	ptr
     116/       0 :                     	ldx	value
     117/       0 :                     	jsr	atan_mp
     118/       0 :                     	endm
     119/       0 :                     
     120/       0 :                     mprint	macro	ptr



     121/       0 :                     	lda	ptr
     122/       0 :                     	jsr	print_mp
     123/       0 :                     	endm
     124/       0 :                     
     125/       0 :                     
     126/       0 :                     
     127/     900 :                     	org	$900		; start here
     128/     900 :                     main:
     129/     900 : 18                  	clc			; clear carry
     130/     901 : FB                  	xce			; exchange emulation/carry flag
     131/     902 :                     				; to switch to 65816 mode
     132/     902 : C2 30               	rep	#%00110000	; 16-bit data/index mode
     133/     904 :                     	assume	m:0		; assume 16-bit memory
     134/     904 :                     	assume	x:0		; assume 16-bit index
     135/     904 :                     	assume	dpr:$0		; assume direct page is 0
     136/     904 :                     
     137/     904 : A9 26 09            	lda	#pitext		; print PI text
     138/     907 : 20 BD 0E            	jsr	print
     139/     90A :                     				; setup full DP for better speed
     140/     90A : A9 00 08            	lda	#dp		; setup direct page
     141/     90D : 5B                  	tcd			; C(A) -> DPR
     142/     90E :                     	assume	dpr:dp		; assume direct page is $800
     143/     90E :                     
     144/     90E : 20 3B 09            	jsr	pi		; compute Pi
     145/     911 :                     
     146/     911 : A9 00 00            	lda	#$0		; setup DPR back to 0
     147/     914 : 5B                  	tcd			; setup direct page
     148/     915 :                     
     149/     915 : (MACRO)             	mprint	#mp_a		; print results
     149/     915 : A9 3C 13                    lda     #mp_a
     149/     918 : 20 1C 0E                    jsr     print_mp
     150/     91B :                     
     151/     91B : E2 30               	sep	#%00110000	; 8-bit data/index mode
     152/     91D : 20 8E FD            	jsr	crout		; print CR
     153/     920 :                     				; back to full-on 8-bit mode
     154/     920 : 38                  	sec			; set carry
     155/     921 : FB                  	xce			; exchange emulation/carry flag
     156/     922 :                     				; to switch to 6502 mode
     157/     922 :                     
     158/     922 : 4C 69 FF            	jmp	warm		; emu65816 version
     159/     925 : 60                  	rts
     160/     926 :                     
     161/     926 :                     
     162/     926 : 31 30 30 30 20 44   pitext:	byt	"1000 DIGITS OF PI = \0"
                    49 47 49 54 53 20 
                    4F 46 20 50 49 20 
                    3D 20 00 
     163/     93B :                     
     164/     93B :                     ;;;
     165/     93B :                     ;;; Direct Page $800 code
     166/     93B :                     ;;;
     167/     93B :                     	assume	m:0		; assume 16-bit memory
     168/     93B :                     	assume	x:0		; assume 16-bit index
     169/     93B :                     	assume	dpr:dp		; assume direct page is dp
     170/     93B :                     
     171/     93B :                     
     172/     93B : (MACRO)             pi:	matan	#mp_a,#5	; a = atan(1/5)
     172/     93B : A9 3C 13                    lda     #mp_a
     172/     93E : A2 05 00                    ldx     #5
     172/     941 : 20 7B 09                    jsr     atan_mp



     173/     944 : (MACRO)             	masl	#mp_a		; a = a * 4
     173/     944 : A9 3C 13                    lda     #mp_a
     173/     947 : 85 10                       sta     ptr
     173/     949 : 20 6E 0A                    jsr     asl_mp
     174/     94C : (MACRO)             	masl	#mp_a
     174/     94C : A9 3C 13                    lda     #mp_a
     174/     94F : 85 10                       sta     ptr
     174/     951 : 20 6E 0A                    jsr     asl_mp
     175/     954 : (MACRO)             	matan	#mp_b,#239	; b = atan(1/239)
     175/     954 : A9 DE 14                    lda     #mp_b
     175/     957 : A2 EF 00                    ldx     #239
     175/     95A : 20 7B 09                    jsr     atan_mp
     176/     95D : (MACRO)             	msub	#mp_a,#mp_b	; a = a - b
     176/     95D : A9 3C 13                    lda     #mp_a
     176/     960 : 85 10                       sta     ptr
     176/     962 : A9 DE 14                    lda     #mp_b
     176/     965 : 85 12                       sta     ptr_mp
     176/     967 : 20 40 0A                    jsr     sub_mp
     177/     96A : (MACRO)             	masl	#mp_a		; a = a * 4
     177/     96A : A9 3C 13                    lda     #mp_a
     177/     96D : 85 10                       sta     ptr
     177/     96F : 20 6E 0A                    jsr     asl_mp
     178/     972 : (MACRO)             	masl	#mp_a
     178/     972 : A9 3C 13                    lda     #mp_a
     178/     975 : 85 10                       sta     ptr
     178/     977 : 20 6E 0A                    jsr     asl_mp
     179/     97A : 60                  	rts
     180/     97B :                     
     181/     97B :                     
     182/     97B :                     atan_mp:
     183/     97B : 85 22               	sta	ptr_a		; store ptr to ptr_a
     184/     97D : 86 30               	stx	regx		; save x
     185/     97F : 8A                  	txa			; X -> A
     186/     980 : 0A                  	asl			; 2x
     187/     981 : AA                  	tax			; A -> X 
     188/     982 : BD D8 10            	lda	sqrtbl,x	; load from squares table
     189/     985 : 85 32               	sta	x2		;   and save
     190/     987 : (MACRO)             	mset	#mp_x,#1	; mp_x = 1
     190/     987 : A9 80 16                    lda     #mp_x
     190/     98A : A2 01 00                    ldx     #1
     190/     98D : 20 F0 09                    jsr     set_mp
     191/     990 : (MACRO)             	mdiv	#mp_x,regx	; mp_x /= regx
     191/     990 : A9 80 16                    lda     #mp_x
     191/     993 : A6 30                       ldx     regx
     191/     995 : 20 98 0A                    jsr     div_mp
     192/     998 : (MACRO)             	mcopy	ptr_a,#mp_x	; ptr_a = mp_x
     192/     998 : A4 22                       ldy     ptr_a               ; Y = dest
     192/     99A : A2 80 16                    ldx     #mp_x               ; X = source
     192/     99D : A9 A1 01                    lda     #(bin_len*2)-1  ; bytes to copy - 1
     192/     9A0 : 54 00 00                    mvn     0,0             ; copy block
     193/     9A3 : A9 01 00            	lda	#1		; n = 1
     194/     9A6 : 85 20               	sta	n
     195/     9A8 :                     atan_mp_loop:			; main loop
     196/     9A8 : E6 20               	inc	n		; n += 2
     197/     9AA : E6 20               	inc	n
     198/     9AC : (MACRO)             	mdiv	#mp_x,x2	; x = x / x2
     198/     9AC : A9 80 16                    lda     #mp_x
     198/     9AF : A6 32                       ldx     x2
     198/     9B1 : 20 98 0A                    jsr     div_mp
     199/     9B4 : (MACRO)             	mcopy	#mp_y,#mp_x	; y = x



     199/     9B4 : A0 22 18                    ldy     #mp_y               ; Y = dest
     199/     9B7 : A2 80 16                    ldx     #mp_x               ; X = source
     199/     9BA : A9 A1 01                    lda     #(bin_len*2)-1  ; bytes to copy - 1
     199/     9BD : 54 00 00                    mvn     0,0             ; copy block
     200/     9C0 : (MACRO)             	mdiv	#mp_y,n		; y = y / n
     200/     9C0 : A9 22 18                    lda     #mp_y
     200/     9C3 : A6 20                       ldx     n
     200/     9C5 : 20 98 0A                    jsr     div_mp
     201/     9C8 : B0 25               	bcs	atan_mp_end	; dividend = 0, done
     202/     9CA : A5 20               	lda	n		; add or sub
     203/     9CC : 29 02 00            	and	#2
     204/     9CF : F0 0F               	beq	+		; add it
     205/     9D1 : (MACRO)             	msub	ptr_a,#mp_y	; a = a - y 
     205/     9D1 : A5 22                       lda     ptr_a
     205/     9D3 : 85 10                       sta     ptr
     205/     9D5 : A9 22 18                    lda     #mp_y
     205/     9D8 : 85 12                       sta     ptr_mp
     205/     9DA : 20 40 0A                    jsr     sub_mp
     206/     9DD : 4C A8 09            	jmp	atan_mp_loop
     207/     9E0 : (MACRO)             /	madd	ptr_a,#mp_y	; a = a + y 
     207/     9E0 : A5 22                       lda     ptr_a
     207/     9E2 : 85 10                       sta     ptr
     207/     9E4 : A9 22 18                    lda     #mp_y
     207/     9E7 : 85 12                       sta     ptr_mp
     207/     9E9 : 20 12 0A                    jsr     add_mp
     208/     9EC : 4C A8 09            	jmp	atan_mp_loop
     209/     9EF :                     atan_mp_end:
     210/     9EF : 60                  	rts
     211/     9F0 :                     
     212/     9F0 :                     
     213/     9F0 : 85 10               set_mp: sta	ptr		; write pointer to ptr
     214/     9F2 : 8A                  	txa			; A = initial value left of decimal
     215/     9F3 : EB                  	xba			; swap A/B to put init value in MSB
     216/     9F4 : A0 A0 01            	ldy	#bin_end*2	; Y = MSW
     217/     9F7 : 91 10               	sta	(ptr),y		; write out init value
     218/     9F9 : A9 00 00            	lda	#0		; zero out rest of array
     219/     9FC : 88                  /	dey
     220/     9FD : 88                  	dey
     221/     9FE : 91 10               	sta	(ptr),y		; write out zero
     222/     A00 : 88                  	dey
     223/     A01 : 88                  	dey
     224/     A02 : 91 10               	sta	(ptr),y		; write out zero
     225/     A04 : 88                  	dey
     226/     A05 : 88                  	dey
     227/     A06 : 91 10               	sta	(ptr),y		; write out zero
     228/     A08 : 88                  	dey
     229/     A09 : 88                  	dey
     230/     A0A : 91 10               	sta	(ptr),y		; write out zero
     231/     A0C : C0 00 00            	cpy	#0
     232/     A0F : D0 EB               	bne	-
     233/     A11 : 60                  	rts
     234/     A12 :                     
     235/     A12 :                     
     236/     A12 : A0 00 00            add_mp: ldy	#0		; Y = LSW
     237/     A15 : A2 35 00            	ldx	#unrollc	; number of unrolled loops
     238/     A18 : 18                  	clc			; clear carry
     239/     A19 : 4C 34 0A            	jmp	++		; pre computed Duff's Device
     240/     A1C : B1 10               /	lda	(ptr),y
     241/     A1E : 71 12               	adc	(ptr_mp),y
     242/     A20 : 91 10               	sta	(ptr),y



     243/     A22 : C8                  	iny
     244/     A23 : C8                  	iny
     245/     A24 : B1 10               	lda	(ptr),y
     246/     A26 : 71 12               	adc	(ptr_mp),y
     247/     A28 : 91 10               	sta	(ptr),y
     248/     A2A : C8                  	iny
     249/     A2B : C8                  	iny
     250/     A2C : B1 10               	lda	(ptr),y
     251/     A2E : 71 12               	adc	(ptr_mp),y
     252/     A30 : 91 10               	sta	(ptr),y
     253/     A32 : C8                  	iny
     254/     A33 : C8                  	iny
     255/     A34 : B1 10               /	lda	(ptr),y
     256/     A36 : 71 12               	adc	(ptr_mp),y
     257/     A38 : 91 10               	sta	(ptr),y
     258/     A3A : C8                  	iny
     259/     A3B : C8                  	iny
     260/     A3C : CA                  	dex
     261/     A3D : D0 DD               	bne	--
     262/     A3F : 60                  	rts
     263/     A40 :                     
     264/     A40 :                     
     265/     A40 : A0 00 00            sub_mp: ldy	#0		; Y = LSW
     266/     A43 : A2 35 00            	ldx	#unrollc	; number of unrolled loops
     267/     A46 : 38                  	sec			; set carry
     268/     A47 : 4C 62 0A            	jmp	++		; pre computed Duff's Device
     269/     A4A : B1 10               /	lda	(ptr),y
     270/     A4C : F1 12               	sbc	(ptr_mp),y
     271/     A4E : 91 10               	sta	(ptr),y
     272/     A50 : C8                  	iny
     273/     A51 : C8                  	iny
     274/     A52 : B1 10               	lda	(ptr),y
     275/     A54 : F1 12               	sbc	(ptr_mp),y
     276/     A56 : 91 10               	sta	(ptr),y
     277/     A58 : C8                  	iny
     278/     A59 : C8                  	iny
     279/     A5A : B1 10               	lda	(ptr),y
     280/     A5C : F1 12               	sbc	(ptr_mp),y
     281/     A5E : 91 10               	sta	(ptr),y
     282/     A60 : C8                  	iny
     283/     A61 : C8                  	iny
     284/     A62 : B1 10               /	lda	(ptr),y
     285/     A64 : F1 12               	sbc	(ptr_mp),y
     286/     A66 : 91 10               	sta	(ptr),y
     287/     A68 : C8                  	iny
     288/     A69 : C8                  	iny
     289/     A6A : CA                  	dex
     290/     A6B : D0 DD               	bne	--
     291/     A6D : 60                  	rts
     292/     A6E :                     
     293/     A6E :                     
     294/     A6E : A0 00 00            asl_mp: ldy	#0		; Y = LSW
     295/     A71 : A2 35 00            	ldx	#unrollc	; number of unrolled loops
     296/     A74 : 18                  	clc			; clear carry
     297/     A75 : 4C 8D 0A            	jmp	++		; pre computed Duff's Device
     298/     A78 : B1 10               /	lda	(ptr),y
     299/     A7A : 2A                  	rol
     300/     A7B : 91 10               	sta	(ptr),y
     301/     A7D : C8                  	iny
     302/     A7E : C8                  	iny



     303/     A7F : B1 10               	lda	(ptr),y
     304/     A81 : 2A                  	rol
     305/     A82 : 91 10               	sta	(ptr),y
     306/     A84 : C8                  	iny
     307/     A85 : C8                  	iny
     308/     A86 : B1 10               	lda	(ptr),y
     309/     A88 : 2A                  	rol
     310/     A89 : 91 10               	sta	(ptr),y
     311/     A8B : C8                  	iny
     312/     A8C : C8                  	iny
     313/     A8D : B1 10               /	lda	(ptr),y
     314/     A8F : 2A                  	rol
     315/     A90 : 91 10               	sta	(ptr),y
     316/     A92 : C8                  	iny
     317/     A93 : C8                  	iny
     318/     A94 : CA                  	dex
     319/     A95 : D0 E1               	bne	--
     320/     A97 : 60                  	rts
     321/     A98 :                     
     322/     A98 :                     
     323/     A98 :                     div16	macro		
     324/     A98 :                     	lda	(ptr),y	
     325/     A98 :                     	sta	dividend
     326/     A98 :                     	txa			; remainder
     327/     A98 :                     	asl	dividend
     328/     A98 :                     	rept 16			; unroll 16 times for speed
     329/     A98 :                     	rol
     330/     A98 :                     	bcs	m0
     331/     A98 :                     	cmp	divisor
     332/     A98 :                     	bcc	m1
     333/     A98 :                     m0:	sbc	divisor
     334/     A98 :                     	sec
     335/     A98 :                     m1:	rol	dividend
     336/     A98 :                     	endm
     337/     A98 :                     	tax			; remainder
     338/     A98 :                     	lda	dividend
     339/     A98 :                     	sta	(ptr),y
     340/     A98 :                     	endm
     341/     A98 :                     
     342/     A98 :                     div_mp:
     343/     A98 : 85 10               	sta	ptr		; store ptr
     344/     A9A : 86 18               	stx	divisor		; save divisor
     345/     A9C : A0 A0 01            	ldy	#bin_end*2	; Y = MSW
     346/     A9F :                     				; Duff's Device
     347/     A9F : 4C B4 0A            	jmp	++		; bin_len hard coded, no need to guess
     348/     AA2 : B1 10               /	lda	(ptr),y		; check	0,4,...,252
     349/     AA4 : D0 1B               	bne	++
     350/     AA6 : 88                  	dey
     351/     AA7 : 88                  	dey
     352/     AA8 : B1 10               	lda	(ptr),y		; check 1,5,...,253
     353/     AAA : D0 15               	bne	++
     354/     AAC : 88                  	dey
     355/     AAD : 88                  	dey
     356/     AAE : B1 10               	lda	(ptr),y		; check 2,6,...,254
     357/     AB0 : D0 0F               	bne	++
     358/     AB2 : 88                  	dey
     359/     AB3 : 88                  	dey
     360/     AB4 : B1 10               /	lda	(ptr),y		; check 3,7,...,255
     361/     AB6 : D0 09               	bne	+
     362/     AB8 : 88                  	dey



     363/     AB9 : 88                  	dey
     364/     ABA : C0 FE FF            	cpy	#-2
     365/     ABD : D0 E3               	bne	--
     366/     ABF : 38                  	sec			; flag: all cells are zero
     367/     AC0 : 60                  	rts
     368/     AC1 :                     /
     369/     AC1 : A2 00 00            	ldx	#0		; x will hold remainder
     370/     AC4 : 98                  	tya			; Duff's Device
     371/     AC5 : 4A                  	lsr			; even number of non-zero
     372/     AC6 : 1A                  	inc	a
     373/     AC7 : 29 03 00            	and	#%11		; however there can be an odd number of pairs
     374/     ACA : F0 0E               	beq	d0		; 00 & 11 = 0
     375/     ACC : 4A                  	lsr			; 00 => 0,0; 01 => 0,1; 10 => 1,0; 11 => 1,1
     376/     ACD : D0 03               	bne	+
     377/     ACF : 4C 44 0D            	jmp	d3		; 0,1 long branch
     378/     AD2 : 90 03               /	bcc	+		; 1,0 long branch
     379/     AD4 : 4C A8 0B            	jmp	d1		; 1,1 long branch
     380/     AD7 : 4C 76 0C            /	jmp	d2
     381/     ADA :                     
     382/     ADA : (MACRO)             d0:	div16
     382/     ADA : B1 10                       lda     (ptr),y 
     382/     ADC : 85 14                       sta     dividend
     382/     ADE : 8A                          txa                     ; remainder
     382/     ADF : 06 14                       asl     dividend
     382/     AE1 :                             rept 16                 ; unroll 16 times for speed
     382/     AE1 :                             rol
     382/     AE1 :                             bcs     m0
     382/     AE1 :                             cmp     divisor
     382/     AE1 :                             bcc     m1
     382/     AE1 :                     m0:     sbc     divisor
     382/     AE1 :                             sec
     382/     AE1 :                     m1:     rol     dividend
     382/     AE1 :                             endm
     382/     AE1 : 2A                          rol
     382/     AE2 : B0 04                       bcs     m0
     382/     AE4 : C5 18                       cmp     divisor
     382/     AE6 : 90 03                       bcc     m1
     382/     AE8 : E5 18               m0:     sbc     divisor
     382/     AEA : 38                          sec
     382/     AEB : 26 14               m1:     rol     dividend
     382/     AED : 2A                          rol
     382/     AEE : B0 04                       bcs     m0
     382/     AF0 : C5 18                       cmp     divisor
     382/     AF2 : 90 03                       bcc     m1
     382/     AF4 : E5 18               m0:     sbc     divisor
     382/     AF6 : 38                          sec
     382/     AF7 : 26 14               m1:     rol     dividend
     382/     AF9 : 2A                          rol
     382/     AFA : B0 04                       bcs     m0
     382/     AFC : C5 18                       cmp     divisor
     382/     AFE : 90 03                       bcc     m1
     382/     B00 : E5 18               m0:     sbc     divisor
     382/     B02 : 38                          sec
     382/     B03 : 26 14               m1:     rol     dividend
     382/     B05 : 2A                          rol
     382/     B06 : B0 04                       bcs     m0
     382/     B08 : C5 18                       cmp     divisor
     382/     B0A : 90 03                       bcc     m1
     382/     B0C : E5 18               m0:     sbc     divisor
     382/     B0E : 38                          sec



     382/     B0F : 26 14               m1:     rol     dividend
     382/     B11 : 2A                          rol
     382/     B12 : B0 04                       bcs     m0
     382/     B14 : C5 18                       cmp     divisor
     382/     B16 : 90 03                       bcc     m1
     382/     B18 : E5 18               m0:     sbc     divisor
     382/     B1A : 38                          sec
     382/     B1B : 26 14               m1:     rol     dividend
     382/     B1D : 2A                          rol
     382/     B1E : B0 04                       bcs     m0
     382/     B20 : C5 18                       cmp     divisor
     382/     B22 : 90 03                       bcc     m1
     382/     B24 : E5 18               m0:     sbc     divisor
     382/     B26 : 38                          sec
     382/     B27 : 26 14               m1:     rol     dividend
     382/     B29 : 2A                          rol
     382/     B2A : B0 04                       bcs     m0
     382/     B2C : C5 18                       cmp     divisor
     382/     B2E : 90 03                       bcc     m1
     382/     B30 : E5 18               m0:     sbc     divisor
     382/     B32 : 38                          sec
     382/     B33 : 26 14               m1:     rol     dividend
     382/     B35 : 2A                          rol
     382/     B36 : B0 04                       bcs     m0
     382/     B38 : C5 18                       cmp     divisor
     382/     B3A : 90 03                       bcc     m1
     382/     B3C : E5 18               m0:     sbc     divisor
     382/     B3E : 38                          sec
     382/     B3F : 26 14               m1:     rol     dividend
     382/     B41 : 2A                          rol
     382/     B42 : B0 04                       bcs     m0
     382/     B44 : C5 18                       cmp     divisor
     382/     B46 : 90 03                       bcc     m1
     382/     B48 : E5 18               m0:     sbc     divisor
     382/     B4A : 38                          sec
     382/     B4B : 26 14               m1:     rol     dividend
     382/     B4D : 2A                          rol
     382/     B4E : B0 04                       bcs     m0
     382/     B50 : C5 18                       cmp     divisor
     382/     B52 : 90 03                       bcc     m1
     382/     B54 : E5 18               m0:     sbc     divisor
     382/     B56 : 38                          sec
     382/     B57 : 26 14               m1:     rol     dividend
     382/     B59 : 2A                          rol
     382/     B5A : B0 04                       bcs     m0
     382/     B5C : C5 18                       cmp     divisor
     382/     B5E : 90 03                       bcc     m1
     382/     B60 : E5 18               m0:     sbc     divisor
     382/     B62 : 38                          sec
     382/     B63 : 26 14               m1:     rol     dividend
     382/     B65 : 2A                          rol
     382/     B66 : B0 04                       bcs     m0
     382/     B68 : C5 18                       cmp     divisor
     382/     B6A : 90 03                       bcc     m1
     382/     B6C : E5 18               m0:     sbc     divisor
     382/     B6E : 38                          sec
     382/     B6F : 26 14               m1:     rol     dividend
     382/     B71 : 2A                          rol
     382/     B72 : B0 04                       bcs     m0
     382/     B74 : C5 18                       cmp     divisor



     382/     B76 : 90 03                       bcc     m1
     382/     B78 : E5 18               m0:     sbc     divisor
     382/     B7A : 38                          sec
     382/     B7B : 26 14               m1:     rol     dividend
     382/     B7D : 2A                          rol
     382/     B7E : B0 04                       bcs     m0
     382/     B80 : C5 18                       cmp     divisor
     382/     B82 : 90 03                       bcc     m1
     382/     B84 : E5 18               m0:     sbc     divisor
     382/     B86 : 38                          sec
     382/     B87 : 26 14               m1:     rol     dividend
     382/     B89 : 2A                          rol
     382/     B8A : B0 04                       bcs     m0
     382/     B8C : C5 18                       cmp     divisor
     382/     B8E : 90 03                       bcc     m1
     382/     B90 : E5 18               m0:     sbc     divisor
     382/     B92 : 38                          sec
     382/     B93 : 26 14               m1:     rol     dividend
     382/     B95 : 2A                          rol
     382/     B96 : B0 04                       bcs     m0
     382/     B98 : C5 18                       cmp     divisor
     382/     B9A : 90 03                       bcc     m1
     382/     B9C : E5 18               m0:     sbc     divisor
     382/     B9E : 38                          sec
     382/     B9F : 26 14               m1:     rol     dividend
     382/     BA1 : AA                          tax                     ; remainder
     382/     BA2 : A5 14                       lda     dividend
     382/     BA4 : 91 10                       sta     (ptr),y
     383/     BA6 : 88                  	dey
     384/     BA7 : 88                  	dey
     385/     BA8 : (MACRO)             d1:	div16
     385/     BA8 : B1 10                       lda     (ptr),y 
     385/     BAA : 85 14                       sta     dividend
     385/     BAC : 8A                          txa                     ; remainder
     385/     BAD : 06 14                       asl     dividend
     385/     BAF :                             rept 16                 ; unroll 16 times for speed
     385/     BAF :                             rol
     385/     BAF :                             bcs     m0
     385/     BAF :                             cmp     divisor
     385/     BAF :                             bcc     m1
     385/     BAF :                     m0:     sbc     divisor
     385/     BAF :                             sec
     385/     BAF :                     m1:     rol     dividend
     385/     BAF :                             endm
     385/     BAF : 2A                          rol
     385/     BB0 : B0 04                       bcs     m0
     385/     BB2 : C5 18                       cmp     divisor
     385/     BB4 : 90 03                       bcc     m1
     385/     BB6 : E5 18               m0:     sbc     divisor
     385/     BB8 : 38                          sec
     385/     BB9 : 26 14               m1:     rol     dividend
     385/     BBB : 2A                          rol
     385/     BBC : B0 04                       bcs     m0
     385/     BBE : C5 18                       cmp     divisor
     385/     BC0 : 90 03                       bcc     m1
     385/     BC2 : E5 18               m0:     sbc     divisor
     385/     BC4 : 38                          sec
     385/     BC5 : 26 14               m1:     rol     dividend
     385/     BC7 : 2A                          rol
     385/     BC8 : B0 04                       bcs     m0



     385/     BCA : C5 18                       cmp     divisor
     385/     BCC : 90 03                       bcc     m1
     385/     BCE : E5 18               m0:     sbc     divisor
     385/     BD0 : 38                          sec
     385/     BD1 : 26 14               m1:     rol     dividend
     385/     BD3 : 2A                          rol
     385/     BD4 : B0 04                       bcs     m0
     385/     BD6 : C5 18                       cmp     divisor
     385/     BD8 : 90 03                       bcc     m1
     385/     BDA : E5 18               m0:     sbc     divisor
     385/     BDC : 38                          sec
     385/     BDD : 26 14               m1:     rol     dividend
     385/     BDF : 2A                          rol
     385/     BE0 : B0 04                       bcs     m0
     385/     BE2 : C5 18                       cmp     divisor
     385/     BE4 : 90 03                       bcc     m1
     385/     BE6 : E5 18               m0:     sbc     divisor
     385/     BE8 : 38                          sec
     385/     BE9 : 26 14               m1:     rol     dividend
     385/     BEB : 2A                          rol
     385/     BEC : B0 04                       bcs     m0
     385/     BEE : C5 18                       cmp     divisor
     385/     BF0 : 90 03                       bcc     m1
     385/     BF2 : E5 18               m0:     sbc     divisor
     385/     BF4 : 38                          sec
     385/     BF5 : 26 14               m1:     rol     dividend
     385/     BF7 : 2A                          rol
     385/     BF8 : B0 04                       bcs     m0
     385/     BFA : C5 18                       cmp     divisor
     385/     BFC : 90 03                       bcc     m1
     385/     BFE : E5 18               m0:     sbc     divisor
     385/     C00 : 38                          sec
     385/     C01 : 26 14               m1:     rol     dividend
     385/     C03 : 2A                          rol
     385/     C04 : B0 04                       bcs     m0
     385/     C06 : C5 18                       cmp     divisor
     385/     C08 : 90 03                       bcc     m1
     385/     C0A : E5 18               m0:     sbc     divisor
     385/     C0C : 38                          sec
     385/     C0D : 26 14               m1:     rol     dividend
     385/     C0F : 2A                          rol
     385/     C10 : B0 04                       bcs     m0
     385/     C12 : C5 18                       cmp     divisor
     385/     C14 : 90 03                       bcc     m1
     385/     C16 : E5 18               m0:     sbc     divisor
     385/     C18 : 38                          sec
     385/     C19 : 26 14               m1:     rol     dividend
     385/     C1B : 2A                          rol
     385/     C1C : B0 04                       bcs     m0
     385/     C1E : C5 18                       cmp     divisor
     385/     C20 : 90 03                       bcc     m1
     385/     C22 : E5 18               m0:     sbc     divisor
     385/     C24 : 38                          sec
     385/     C25 : 26 14               m1:     rol     dividend
     385/     C27 : 2A                          rol
     385/     C28 : B0 04                       bcs     m0
     385/     C2A : C5 18                       cmp     divisor
     385/     C2C : 90 03                       bcc     m1
     385/     C2E : E5 18               m0:     sbc     divisor
     385/     C30 : 38                          sec



     385/     C31 : 26 14               m1:     rol     dividend
     385/     C33 : 2A                          rol
     385/     C34 : B0 04                       bcs     m0
     385/     C36 : C5 18                       cmp     divisor
     385/     C38 : 90 03                       bcc     m1
     385/     C3A : E5 18               m0:     sbc     divisor
     385/     C3C : 38                          sec
     385/     C3D : 26 14               m1:     rol     dividend
     385/     C3F : 2A                          rol
     385/     C40 : B0 04                       bcs     m0
     385/     C42 : C5 18                       cmp     divisor
     385/     C44 : 90 03                       bcc     m1
     385/     C46 : E5 18               m0:     sbc     divisor
     385/     C48 : 38                          sec
     385/     C49 : 26 14               m1:     rol     dividend
     385/     C4B : 2A                          rol
     385/     C4C : B0 04                       bcs     m0
     385/     C4E : C5 18                       cmp     divisor
     385/     C50 : 90 03                       bcc     m1
     385/     C52 : E5 18               m0:     sbc     divisor
     385/     C54 : 38                          sec
     385/     C55 : 26 14               m1:     rol     dividend
     385/     C57 : 2A                          rol
     385/     C58 : B0 04                       bcs     m0
     385/     C5A : C5 18                       cmp     divisor
     385/     C5C : 90 03                       bcc     m1
     385/     C5E : E5 18               m0:     sbc     divisor
     385/     C60 : 38                          sec
     385/     C61 : 26 14               m1:     rol     dividend
     385/     C63 : 2A                          rol
     385/     C64 : B0 04                       bcs     m0
     385/     C66 : C5 18                       cmp     divisor
     385/     C68 : 90 03                       bcc     m1
     385/     C6A : E5 18               m0:     sbc     divisor
     385/     C6C : 38                          sec
     385/     C6D : 26 14               m1:     rol     dividend
     385/     C6F : AA                          tax                     ; remainder
     385/     C70 : A5 14                       lda     dividend
     385/     C72 : 91 10                       sta     (ptr),y
     386/     C74 : 88                  	dey
     387/     C75 : 88                  	dey
     388/     C76 : (MACRO)             d2:	div16
     388/     C76 : B1 10                       lda     (ptr),y 
     388/     C78 : 85 14                       sta     dividend
     388/     C7A : 8A                          txa                     ; remainder
     388/     C7B : 06 14                       asl     dividend
     388/     C7D :                             rept 16                 ; unroll 16 times for speed
     388/     C7D :                             rol
     388/     C7D :                             bcs     m0
     388/     C7D :                             cmp     divisor
     388/     C7D :                             bcc     m1
     388/     C7D :                     m0:     sbc     divisor
     388/     C7D :                             sec
     388/     C7D :                     m1:     rol     dividend
     388/     C7D :                             endm
     388/     C7D : 2A                          rol
     388/     C7E : B0 04                       bcs     m0
     388/     C80 : C5 18                       cmp     divisor
     388/     C82 : 90 03                       bcc     m1
     388/     C84 : E5 18               m0:     sbc     divisor



     388/     C86 : 38                          sec
     388/     C87 : 26 14               m1:     rol     dividend
     388/     C89 : 2A                          rol
     388/     C8A : B0 04                       bcs     m0
     388/     C8C : C5 18                       cmp     divisor
     388/     C8E : 90 03                       bcc     m1
     388/     C90 : E5 18               m0:     sbc     divisor
     388/     C92 : 38                          sec
     388/     C93 : 26 14               m1:     rol     dividend
     388/     C95 : 2A                          rol
     388/     C96 : B0 04                       bcs     m0
     388/     C98 : C5 18                       cmp     divisor
     388/     C9A : 90 03                       bcc     m1
     388/     C9C : E5 18               m0:     sbc     divisor
     388/     C9E : 38                          sec
     388/     C9F : 26 14               m1:     rol     dividend
     388/     CA1 : 2A                          rol
     388/     CA2 : B0 04                       bcs     m0
     388/     CA4 : C5 18                       cmp     divisor
     388/     CA6 : 90 03                       bcc     m1
     388/     CA8 : E5 18               m0:     sbc     divisor
     388/     CAA : 38                          sec
     388/     CAB : 26 14               m1:     rol     dividend
     388/     CAD : 2A                          rol
     388/     CAE : B0 04                       bcs     m0
     388/     CB0 : C5 18                       cmp     divisor
     388/     CB2 : 90 03                       bcc     m1
     388/     CB4 : E5 18               m0:     sbc     divisor
     388/     CB6 : 38                          sec
     388/     CB7 : 26 14               m1:     rol     dividend
     388/     CB9 : 2A                          rol
     388/     CBA : B0 04                       bcs     m0
     388/     CBC : C5 18                       cmp     divisor
     388/     CBE : 90 03                       bcc     m1
     388/     CC0 : E5 18               m0:     sbc     divisor
     388/     CC2 : 38                          sec
     388/     CC3 : 26 14               m1:     rol     dividend
     388/     CC5 : 2A                          rol
     388/     CC6 : B0 04                       bcs     m0
     388/     CC8 : C5 18                       cmp     divisor
     388/     CCA : 90 03                       bcc     m1
     388/     CCC : E5 18               m0:     sbc     divisor
     388/     CCE : 38                          sec
     388/     CCF : 26 14               m1:     rol     dividend
     388/     CD1 : 2A                          rol
     388/     CD2 : B0 04                       bcs     m0
     388/     CD4 : C5 18                       cmp     divisor
     388/     CD6 : 90 03                       bcc     m1
     388/     CD8 : E5 18               m0:     sbc     divisor
     388/     CDA : 38                          sec
     388/     CDB : 26 14               m1:     rol     dividend
     388/     CDD : 2A                          rol
     388/     CDE : B0 04                       bcs     m0
     388/     CE0 : C5 18                       cmp     divisor
     388/     CE2 : 90 03                       bcc     m1
     388/     CE4 : E5 18               m0:     sbc     divisor
     388/     CE6 : 38                          sec
     388/     CE7 : 26 14               m1:     rol     dividend
     388/     CE9 : 2A                          rol
     388/     CEA : B0 04                       bcs     m0



     388/     CEC : C5 18                       cmp     divisor
     388/     CEE : 90 03                       bcc     m1
     388/     CF0 : E5 18               m0:     sbc     divisor
     388/     CF2 : 38                          sec
     388/     CF3 : 26 14               m1:     rol     dividend
     388/     CF5 : 2A                          rol
     388/     CF6 : B0 04                       bcs     m0
     388/     CF8 : C5 18                       cmp     divisor
     388/     CFA : 90 03                       bcc     m1
     388/     CFC : E5 18               m0:     sbc     divisor
     388/     CFE : 38                          sec
     388/     CFF : 26 14               m1:     rol     dividend
     388/     D01 : 2A                          rol
     388/     D02 : B0 04                       bcs     m0
     388/     D04 : C5 18                       cmp     divisor
     388/     D06 : 90 03                       bcc     m1
     388/     D08 : E5 18               m0:     sbc     divisor
     388/     D0A : 38                          sec
     388/     D0B : 26 14               m1:     rol     dividend
     388/     D0D : 2A                          rol
     388/     D0E : B0 04                       bcs     m0
     388/     D10 : C5 18                       cmp     divisor
     388/     D12 : 90 03                       bcc     m1
     388/     D14 : E5 18               m0:     sbc     divisor
     388/     D16 : 38                          sec
     388/     D17 : 26 14               m1:     rol     dividend
     388/     D19 : 2A                          rol
     388/     D1A : B0 04                       bcs     m0
     388/     D1C : C5 18                       cmp     divisor
     388/     D1E : 90 03                       bcc     m1
     388/     D20 : E5 18               m0:     sbc     divisor
     388/     D22 : 38                          sec
     388/     D23 : 26 14               m1:     rol     dividend
     388/     D25 : 2A                          rol
     388/     D26 : B0 04                       bcs     m0
     388/     D28 : C5 18                       cmp     divisor
     388/     D2A : 90 03                       bcc     m1
     388/     D2C : E5 18               m0:     sbc     divisor
     388/     D2E : 38                          sec
     388/     D2F : 26 14               m1:     rol     dividend
     388/     D31 : 2A                          rol
     388/     D32 : B0 04                       bcs     m0
     388/     D34 : C5 18                       cmp     divisor
     388/     D36 : 90 03                       bcc     m1
     388/     D38 : E5 18               m0:     sbc     divisor
     388/     D3A : 38                          sec
     388/     D3B : 26 14               m1:     rol     dividend
     388/     D3D : AA                          tax                     ; remainder
     388/     D3E : A5 14                       lda     dividend
     388/     D40 : 91 10                       sta     (ptr),y
     389/     D42 : 88                  	dey
     390/     D43 : 88                  	dey
     391/     D44 : (MACRO)             d3:	div16
     391/     D44 : B1 10                       lda     (ptr),y 
     391/     D46 : 85 14                       sta     dividend
     391/     D48 : 8A                          txa                     ; remainder
     391/     D49 : 06 14                       asl     dividend
     391/     D4B :                             rept 16                 ; unroll 16 times for speed
     391/     D4B :                             rol
     391/     D4B :                             bcs     m0



     391/     D4B :                             cmp     divisor
     391/     D4B :                             bcc     m1
     391/     D4B :                     m0:     sbc     divisor
     391/     D4B :                             sec
     391/     D4B :                     m1:     rol     dividend
     391/     D4B :                             endm
     391/     D4B : 2A                          rol
     391/     D4C : B0 04                       bcs     m0
     391/     D4E : C5 18                       cmp     divisor
     391/     D50 : 90 03                       bcc     m1
     391/     D52 : E5 18               m0:     sbc     divisor
     391/     D54 : 38                          sec
     391/     D55 : 26 14               m1:     rol     dividend
     391/     D57 : 2A                          rol
     391/     D58 : B0 04                       bcs     m0
     391/     D5A : C5 18                       cmp     divisor
     391/     D5C : 90 03                       bcc     m1
     391/     D5E : E5 18               m0:     sbc     divisor
     391/     D60 : 38                          sec
     391/     D61 : 26 14               m1:     rol     dividend
     391/     D63 : 2A                          rol
     391/     D64 : B0 04                       bcs     m0
     391/     D66 : C5 18                       cmp     divisor
     391/     D68 : 90 03                       bcc     m1
     391/     D6A : E5 18               m0:     sbc     divisor
     391/     D6C : 38                          sec
     391/     D6D : 26 14               m1:     rol     dividend
     391/     D6F : 2A                          rol
     391/     D70 : B0 04                       bcs     m0
     391/     D72 : C5 18                       cmp     divisor
     391/     D74 : 90 03                       bcc     m1
     391/     D76 : E5 18               m0:     sbc     divisor
     391/     D78 : 38                          sec
     391/     D79 : 26 14               m1:     rol     dividend
     391/     D7B : 2A                          rol
     391/     D7C : B0 04                       bcs     m0
     391/     D7E : C5 18                       cmp     divisor
     391/     D80 : 90 03                       bcc     m1
     391/     D82 : E5 18               m0:     sbc     divisor
     391/     D84 : 38                          sec
     391/     D85 : 26 14               m1:     rol     dividend
     391/     D87 : 2A                          rol
     391/     D88 : B0 04                       bcs     m0
     391/     D8A : C5 18                       cmp     divisor
     391/     D8C : 90 03                       bcc     m1
     391/     D8E : E5 18               m0:     sbc     divisor
     391/     D90 : 38                          sec
     391/     D91 : 26 14               m1:     rol     dividend
     391/     D93 : 2A                          rol
     391/     D94 : B0 04                       bcs     m0
     391/     D96 : C5 18                       cmp     divisor
     391/     D98 : 90 03                       bcc     m1
     391/     D9A : E5 18               m0:     sbc     divisor
     391/     D9C : 38                          sec
     391/     D9D : 26 14               m1:     rol     dividend
     391/     D9F : 2A                          rol
     391/     DA0 : B0 04                       bcs     m0
     391/     DA2 : C5 18                       cmp     divisor
     391/     DA4 : 90 03                       bcc     m1
     391/     DA6 : E5 18               m0:     sbc     divisor



     391/     DA8 : 38                          sec
     391/     DA9 : 26 14               m1:     rol     dividend
     391/     DAB : 2A                          rol
     391/     DAC : B0 04                       bcs     m0
     391/     DAE : C5 18                       cmp     divisor
     391/     DB0 : 90 03                       bcc     m1
     391/     DB2 : E5 18               m0:     sbc     divisor
     391/     DB4 : 38                          sec
     391/     DB5 : 26 14               m1:     rol     dividend
     391/     DB7 : 2A                          rol
     391/     DB8 : B0 04                       bcs     m0
     391/     DBA : C5 18                       cmp     divisor
     391/     DBC : 90 03                       bcc     m1
     391/     DBE : E5 18               m0:     sbc     divisor
     391/     DC0 : 38                          sec
     391/     DC1 : 26 14               m1:     rol     dividend
     391/     DC3 : 2A                          rol
     391/     DC4 : B0 04                       bcs     m0
     391/     DC6 : C5 18                       cmp     divisor
     391/     DC8 : 90 03                       bcc     m1
     391/     DCA : E5 18               m0:     sbc     divisor
     391/     DCC : 38                          sec
     391/     DCD : 26 14               m1:     rol     dividend
     391/     DCF : 2A                          rol
     391/     DD0 : B0 04                       bcs     m0
     391/     DD2 : C5 18                       cmp     divisor
     391/     DD4 : 90 03                       bcc     m1
     391/     DD6 : E5 18               m0:     sbc     divisor
     391/     DD8 : 38                          sec
     391/     DD9 : 26 14               m1:     rol     dividend
     391/     DDB : 2A                          rol
     391/     DDC : B0 04                       bcs     m0
     391/     DDE : C5 18                       cmp     divisor
     391/     DE0 : 90 03                       bcc     m1
     391/     DE2 : E5 18               m0:     sbc     divisor
     391/     DE4 : 38                          sec
     391/     DE5 : 26 14               m1:     rol     dividend
     391/     DE7 : 2A                          rol
     391/     DE8 : B0 04                       bcs     m0
     391/     DEA : C5 18                       cmp     divisor
     391/     DEC : 90 03                       bcc     m1
     391/     DEE : E5 18               m0:     sbc     divisor
     391/     DF0 : 38                          sec
     391/     DF1 : 26 14               m1:     rol     dividend
     391/     DF3 : 2A                          rol
     391/     DF4 : B0 04                       bcs     m0
     391/     DF6 : C5 18                       cmp     divisor
     391/     DF8 : 90 03                       bcc     m1
     391/     DFA : E5 18               m0:     sbc     divisor
     391/     DFC : 38                          sec
     391/     DFD : 26 14               m1:     rol     dividend
     391/     DFF : 2A                          rol
     391/     E00 : B0 04                       bcs     m0
     391/     E02 : C5 18                       cmp     divisor
     391/     E04 : 90 03                       bcc     m1
     391/     E06 : E5 18               m0:     sbc     divisor
     391/     E08 : 38                          sec
     391/     E09 : 26 14               m1:     rol     dividend
     391/     E0B : AA                          tax                     ; remainder
     391/     E0C : A5 14                       lda     dividend



     391/     E0E : 91 10                       sta     (ptr),y
     392/     E10 : 88                  	dey
     393/     E11 : 88                  	dey
     394/     E12 : C0 FE FF            	cpy	#-2
     395/     E15 : F0 03               	beq	+
     396/     E17 : 4C DA 0A            	jmp	d0
     397/     E1A : 18                  /	clc			; non zero result
     398/     E1B : 60                  	rts
     399/     E1C :                     
     400/     E1C :                     
     401/     E1C :                     ;;;
     402/     E1C :                     ;;; Direct Page $0 code
     403/     E1C :                     ;;;
     404/     E1C :                     
     405/     E1C :                     	assume	m:0		; assume 16-bit memory
     406/     E1C :                     	assume	x:0		; assume 16-bit index
     407/     E1C :                     	assume	dpr:$0		; assume direct page is 0
     408/     E1C :                     
     409/     E1C :                     ; Description: print mp base 10/100
     410/     E1C :                     ;
     411/     E1C :                     ; Input:       Y(hi)/A(lo) pointer to array
     412/     E1C :                     ;
     413/     E1C :                     ; Output:      mp base 10/100 out to screen
     414/     E1C :                     ;
     415/     E1C :                     ; Registers:   A, X, Y, input array
     416/     E1C :                     ;
     417/     E1C :                     ; Globals:     zero page: ptr (16-bit) , ptr_mp (16-bit), carry_mp (8-bit)
     418/     E1C :                     ;
     419/     E1C :                     ; Locals:
     420/     E1C :                     
     421/     E1C :                     print_mp:
     422/     E1C : 85 00               	sta	ptr_0		; write out pointer
     423/     E1E : A9 F4 01            	lda	#bcd_len	; number of # of multiplies to perform
     424/     E21 : 85 02               	sta	dlength
     425/     E23 : A9 00 00            	lda	#0		; wipe out high A bits (can cause problems with tax)
     426/     E26 :                     
     427/     E26 : E2 20               	sep	#%00100000	; 8-bit data mode
     428/     E28 :                     	assume	m:1		; assume 8-bit memory
     429/     E28 :                     				; print left of decimal
     430/     E28 : A0 A1 01            	ldy	#(bin_len*2)-1	; get first digit in array (little endian)
     431/     E2B : B1 00               	lda	(ptr_0),y
     432/     E2D : AA                  	tax
     433/     E2E : BD D8 12            	lda	bcdtbl,x	; bcd table lookup
     434/     E31 : C9 0A               	cmp	#10		; if less than 10 skip leading zero
     435/     E33 : 90 03               	bcc	+
     436/     E35 :                     				; > 10 code here, going to skip for now
     437/     E35 : 4C 3F 0E            	jmp	++
     438/     E38 : 09 B0               /	ora	#$B0		;   convert single digit to ascii
     439/     E3A : E2 10               	sep	#%00010000	; 8-bit index mode
     440/     E3C : 20 ED FD            	jsr	cout		
     441/     E3F : A9 AE               /	lda	#'.'+$80	; print decimal point (fixed point math)
     442/     E41 : 20 ED FD            	jsr	cout
     443/     E44 :                     				; IIgs cout sets 6502 emulation mode
     444/     E44 : 18                  	clc			; clear carry
     445/     E45 : FB                  	xce			; exchange emulation/carry flag
     446/     E46 : C2 10               	rep	#%00010000	; 16-bit index mode
     447/     E48 :                     
     448/     E48 :                     print_mp1:			; loop through rest of decimal digits
     449/     E48 : A0 A1 01            	ldy	#(bin_len*2)-1	; get first digit in array (little endian)
     450/     E4B : E2 20               	sep	#%00100000	; 8-bit data mode



     451/     E4D :                     	assume	m:1		; assume 8-bit memory
     452/     E4D :                     
     453/     E4D : A9 00               	lda	#0
     454/     E4F : 91 00               	sta	(ptr_0),y	; clear first digit
     455/     E51 : 85 04               	sta	carry_mp	; clear multiprecision carry
     456/     E53 :                     
     457/     E53 :                     	; multi array x 100
     458/     E53 :                     	; loop from LSB to MSB
     459/     E53 :                     	; 16-bit product = array[i] * 100 + carry_mp;
     460/     E53 :                     	; array[i] = product lo
     461/     E53 :                     	; carry_mp = product hi
     462/     E53 :                     	;
     463/     E53 :                     	; C Algorithm:
     464/     E53 :                     	;
     465/     E53 :                     	;    while (j >= 0) {
     466/     E53 :                             ;	result.L = (long) number[j] * 100 + carry;
     467/     E53 :                             ;	number[j] = result.w.lo;
     468/     E53 :                             ;	carry = result.w.hi;
     469/     E53 :                             ;	j--;
     470/     E53 :                         	;    }
     471/     E53 :                     
     472/     E53 :                     m100	macro
     473/     E53 :                     	lda	(ptr_0),y	; get it
     474/     E53 :                     	tax
     475/     E53 :                     	lda	m100lo,x	; get product lo
     476/     E53 :                     	clc
     477/     E53 :                     	adc	carry_mp	; add carry_mp to it
     478/     E53 :                     	sta	(ptr_0),y	;   and save it
     479/     E53 :                     	lda	m100hi,x	; get product hi
     480/     E53 :                     	adc	#0		;   add carry if present
     481/     E53 :                     	sta	carry_mp	;   and save it
     482/     E53 :                     	endm
     483/     E53 :                     
     484/     E53 : A0 FF FF            	ldy	#-1		; start from front
     485/     E56 :                     				; Duff's Device.   We know that (bin_len*2)%4 = 2
     486/     E56 : D0 26               	bne	++		; zero flag unset from ldy
     487/     E58 : C8                  /	iny
     488/     E59 : (MACRO)             	m100
     488/     E59 : B1 00                       lda     (ptr_0),y       ; get it
     488/     E5B : AA                          tax
     488/     E5C : BD D8 0E                    lda     m100lo,x        ; get product lo
     488/     E5F : 18                          clc
     488/     E60 : 65 04                       adc     carry_mp        ; add carry_mp to it
     488/     E62 : 91 00                       sta     (ptr_0),y       ;   and save it
     488/     E64 : BD D8 0F                    lda     m100hi,x        ; get product hi
     488/     E67 : 69 00                       adc     #0              ;   add carry if present
     488/     E69 : 85 04                       sta     carry_mp        ;   and save it
     489/     E6B : C8                  	iny
     490/     E6C : (MACRO)             	m100
     490/     E6C : B1 00                       lda     (ptr_0),y       ; get it
     490/     E6E : AA                          tax
     490/     E6F : BD D8 0E                    lda     m100lo,x        ; get product lo
     490/     E72 : 18                          clc
     490/     E73 : 65 04                       adc     carry_mp        ; add carry_mp to it
     490/     E75 : 91 00                       sta     (ptr_0),y       ;   and save it
     490/     E77 : BD D8 0F                    lda     m100hi,x        ; get product hi
     490/     E7A : 69 00                       adc     #0              ;   add carry if present
     490/     E7C : 85 04                       sta     carry_mp        ;   and save it
     491/     E7E : C8                  /	iny
     492/     E7F : (MACRO)             	m100



     492/     E7F : B1 00                       lda     (ptr_0),y       ; get it
     492/     E81 : AA                          tax
     492/     E82 : BD D8 0E                    lda     m100lo,x        ; get product lo
     492/     E85 : 18                          clc
     492/     E86 : 65 04                       adc     carry_mp        ; add carry_mp to it
     492/     E88 : 91 00                       sta     (ptr_0),y       ;   and save it
     492/     E8A : BD D8 0F                    lda     m100hi,x        ; get product hi
     492/     E8D : 69 00                       adc     #0              ;   add carry if present
     492/     E8F : 85 04                       sta     carry_mp        ;   and save it
     493/     E91 : C8                  	iny
     494/     E92 : (MACRO)             	m100
     494/     E92 : B1 00                       lda     (ptr_0),y       ; get it
     494/     E94 : AA                          tax
     494/     E95 : BD D8 0E                    lda     m100lo,x        ; get product lo
     494/     E98 : 18                          clc
     494/     E99 : 65 04                       adc     carry_mp        ; add carry_mp to it
     494/     E9B : 91 00                       sta     (ptr_0),y       ;   and save it
     494/     E9D : BD D8 0F                    lda     m100hi,x        ; get product hi
     494/     EA0 : 69 00                       adc     #0              ;   add carry if present
     494/     EA2 : 85 04                       sta     carry_mp        ;   and save it
     495/     EA4 : C0 A1 01            	cpy	#(bin_len*2)-1	; all done?
     496/     EA7 : D0 AF               	bne	--
     497/     EA9 :                     
     498/     EA9 : B1 00               	lda	(ptr_0),y	; print array[0] (MSB)
     499/     EAB : AA                  	tax
     500/     EAC : BD D8 12            	lda	bcdtbl,x	; table lookup
     501/     EAF :                     
     502/     EAF : E2 10               	sep	#%00010000	; 8-bit index mode
     503/     EB1 : 20 DA FD            	jsr	prbyte
     504/     EB4 :                     				; IIgs cout sets 6502 emulation mode
     505/     EB4 : 18                  	clc			; clear carry
     506/     EB5 : FB                  	xce			; exchange emulation/carry flag
     507/     EB6 : C2 30               	rep	#%00110000	; 16-bit data/index mode
     508/     EB8 :                     	assume	m:0		; assume 16-bit memory
     509/     EB8 : C6 02               	dec	dlength		; check if dlength = 0
     510/     EBA : D0 8C               	bne	print_mp1
     511/     EBC : 60                  	rts			; dlength = 0, all done
     512/     EBD :                     
     513/     EBD :                     
     514/     EBD :                     print:	
     515/     EBD : 85 00               	sta	ptr_0		; load A in ptr_0
     516/     EBF : E2 30               	sep	#%00110000	; 8-bit data/index mode
     517/     EC1 :                     	assume	m:1		; assume 8-bit memory
     518/     EC1 :                     	assume	x:1		; assume 8-bit index
     519/     EC1 : A0 00               	ldy	#0		; start with first char
     520/     EC3 : B1 00               	lda	(ptr_0),y	; load initial char
     521/     EC5 : 09 80               /	ora	#$80		; we do not want flashing or inverse
     522/     EC7 :                     				;  (its an Apple II thing)
     523/     EC7 : 20 ED FD            	jsr	cout		; call apple II char out
     524/     ECA : C8                  	iny			; y++
     525/     ECB : D0 02               	bne	+		; y rolled to 0?
     526/     ECD : E6 01               	inc	ptr_0+1		;   then inc ptr_0+1 (hi)
     527/     ECF : B1 00               /	lda	(ptr_0),y	; get next char
     528/     ED1 : D0 F2               	bne	--		; not NULL? then print it
     529/     ED3 :                     				; cout put us back in 6502 mode
     530/     ED3 : 18                  	clc			; clear carry
     531/     ED4 : FB                  	xce			; exchange emulation/carry flag
     532/     ED5 : C2 30               	rep	#%00110000	; 16-bit data/index mode
     533/     ED7 : 60                  	rts			; all done, move alone
     534/     ED8 :                     



     535/     ED8 :                     
     536/     ED8 : 00 64 C8 2C 90 F4   m100lo:	fcb	$00,$64,$C8,$2C,$90,$F4,$58,$BC,$20,$84,$E8,$4C,$B0,$14,$78,$DC
                    58 BC 20 84 E8 4C 
                    B0 14 78 DC 
     537/     EE8 : 40 A4 08 6C D0 34   	fcb	$40,$A4,$08,$6C,$D0,$34,$98,$FC,$60,$C4,$28,$8C,$F0,$54,$B8,$1C
                    98 FC 60 C4 28 8C 
                    F0 54 B8 1C 
     538/     EF8 : 80 E4 48 AC 10 74   	fcb	$80,$E4,$48,$AC,$10,$74,$D8,$3C,$A0,$04,$68,$CC,$30,$94,$F8,$5C
                    D8 3C A0 04 68 CC 
                    30 94 F8 5C 
     539/     F08 : C0 24 88 EC 50 B4   	fcb	$C0,$24,$88,$EC,$50,$B4,$18,$7C,$E0,$44,$A8,$0C,$70,$D4,$38,$9C
                    18 7C E0 44 A8 0C 
                    70 D4 38 9C 
     540/     F18 : 00 64 C8 2C 90 F4   	fcb	$00,$64,$C8,$2C,$90,$F4,$58,$BC,$20,$84,$E8,$4C,$B0,$14,$78,$DC
                    58 BC 20 84 E8 4C 
                    B0 14 78 DC 
     541/     F28 : 40 A4 08 6C D0 34   	fcb	$40,$A4,$08,$6C,$D0,$34,$98,$FC,$60,$C4,$28,$8C,$F0,$54,$B8,$1C
                    98 FC 60 C4 28 8C 
                    F0 54 B8 1C 
     542/     F38 : 80 E4 48 AC 10 74   	fcb	$80,$E4,$48,$AC,$10,$74,$D8,$3C,$A0,$04,$68,$CC,$30,$94,$F8,$5C
                    D8 3C A0 04 68 CC 
                    30 94 F8 5C 
     543/     F48 : C0 24 88 EC 50 B4   	fcb	$C0,$24,$88,$EC,$50,$B4,$18,$7C,$E0,$44,$A8,$0C,$70,$D4,$38,$9C
                    18 7C E0 44 A8 0C 
                    70 D4 38 9C 
     544/     F58 : 00 64 C8 2C 90 F4   	fcb	$00,$64,$C8,$2C,$90,$F4,$58,$BC,$20,$84,$E8,$4C,$B0,$14,$78,$DC
                    58 BC 20 84 E8 4C 
                    B0 14 78 DC 
     545/     F68 : 40 A4 08 6C D0 34   	fcb	$40,$A4,$08,$6C,$D0,$34,$98,$FC,$60,$C4,$28,$8C,$F0,$54,$B8,$1C
                    98 FC 60 C4 28 8C 
                    F0 54 B8 1C 
     546/     F78 : 80 E4 48 AC 10 74   	fcb	$80,$E4,$48,$AC,$10,$74,$D8,$3C,$A0,$04,$68,$CC,$30,$94,$F8,$5C
                    D8 3C A0 04 68 CC 
                    30 94 F8 5C 
     547/     F88 : C0 24 88 EC 50 B4   	fcb	$C0,$24,$88,$EC,$50,$B4,$18,$7C,$E0,$44,$A8,$0C,$70,$D4,$38,$9C
                    18 7C E0 44 A8 0C 
                    70 D4 38 9C 
     548/     F98 : 00 64 C8 2C 90 F4   	fcb	$00,$64,$C8,$2C,$90,$F4,$58,$BC,$20,$84,$E8,$4C,$B0,$14,$78,$DC
                    58 BC 20 84 E8 4C 
                    B0 14 78 DC 
     549/     FA8 : 40 A4 08 6C D0 34   	fcb	$40,$A4,$08,$6C,$D0,$34,$98,$FC,$60,$C4,$28,$8C,$F0,$54,$B8,$1C
                    98 FC 60 C4 28 8C 
                    F0 54 B8 1C 
     550/     FB8 : 80 E4 48 AC 10 74   	fcb	$80,$E4,$48,$AC,$10,$74,$D8,$3C,$A0,$04,$68,$CC,$30,$94,$F8,$5C
                    D8 3C A0 04 68 CC 
                    30 94 F8 5C 
     551/     FC8 : C0 24 88 EC 50 B4   	fcb	$C0,$24,$88,$EC,$50,$B4,$18,$7C,$E0,$44,$A8,$0C,$70,$D4,$38,$9C
                    18 7C E0 44 A8 0C 
                    70 D4 38 9C 
     552/     FD8 :                     
     553/     FD8 : 00 00 00 01 01 01   m100hi:	fcb	$00,$00,$00,$01,$01,$01,$02,$02,$03,$03,$03,$04,$04,$05,$05,$05
                    02 02 03 03 03 04 
                    04 05 05 05 
     554/     FE8 : 06 06 07 07 07 08   	fcb	$06,$06,$07,$07,$07,$08,$08,$08,$09,$09,$0A,$0A,$0A,$0B,$0B,$0C
                    08 08 09 09 0A 0A 
                    0A 0B 0B 0C 
     555/     FF8 : 0C 0C 0D 0D 0E 0E   	fcb	$0C,$0C,$0D,$0D,$0E,$0E,$0E,$0F,$0F,$10,$10,$10,$11,$11,$11,$12
                    0E 0F 0F 10 10 10 
                    11 11 11 12 
     556/    1008 : 12 13 13 13 14 14   	fcb	$12,$13,$13,$13,$14,$14,$15,$15,$15,$16,$16,$17,$17,$17,$18,$18



                    15 15 15 16 16 17 
                    17 17 18 18 
     557/    1018 : 19 19 19 1A 1A 1A   	fcb	$19,$19,$19,$1A,$1A,$1A,$1B,$1B,$1C,$1C,$1C,$1D,$1D,$1E,$1E,$1E
                    1B 1B 1C 1C 1C 1D 
                    1D 1E 1E 1E 
     558/    1028 : 1F 1F 20 20 20 21   	fcb	$1F,$1F,$20,$20,$20,$21,$21,$21,$22,$22,$23,$23,$23,$24,$24,$25
                    21 21 22 22 23 23 
                    23 24 24 25 
     559/    1038 : 25 25 26 26 27 27   	fcb	$25,$25,$26,$26,$27,$27,$27,$28,$28,$29,$29,$29,$2A,$2A,$2A,$2B
                    27 28 28 29 29 29 
                    2A 2A 2A 2B 
     560/    1048 : 2B 2C 2C 2C 2D 2D   	fcb	$2B,$2C,$2C,$2C,$2D,$2D,$2E,$2E,$2E,$2F,$2F,$30,$30,$30,$31,$31
                    2E 2E 2E 2F 2F 30 
                    30 30 31 31 
     561/    1058 : 32 32 32 33 33 33   	fcb	$32,$32,$32,$33,$33,$33,$34,$34,$35,$35,$35,$36,$36,$37,$37,$37
                    34 34 35 35 35 36 
                    36 37 37 37 
     562/    1068 : 38 38 39 39 39 3A   	fcb	$38,$38,$39,$39,$39,$3A,$3A,$3A,$3B,$3B,$3C,$3C,$3C,$3D,$3D,$3E
                    3A 3A 3B 3B 3C 3C 
                    3C 3D 3D 3E 
     563/    1078 : 3E 3E 3F 3F 40 40   	fcb	$3E,$3E,$3F,$3F,$40,$40,$40,$41,$41,$42,$42,$42,$43,$43,$43,$44
                    40 41 41 42 42 42 
                    43 43 43 44 
     564/    1088 : 44 45 45 45 46 46   	fcb	$44,$45,$45,$45,$46,$46,$47,$47,$47,$48,$48,$49,$49,$49,$4A,$4A
                    47 47 47 48 48 49 
                    49 49 4A 4A 
     565/    1098 : 4B 4B 4B 4C 4C 4C   	fcb	$4B,$4B,$4B,$4C,$4C,$4C,$4D,$4D,$4E,$4E,$4E,$4F,$4F,$50,$50,$50
                    4D 4D 4E 4E 4E 4F 
                    4F 50 50 50 
     566/    10A8 : 51 51 52 52 52 53   	fcb	$51,$51,$52,$52,$52,$53,$53,$53,$54,$54,$55,$55,$55,$56,$56,$57
                    53 53 54 54 55 55 
                    55 56 56 57 
     567/    10B8 : 57 57 58 58 59 59   	fcb	$57,$57,$58,$58,$59,$59,$59,$5A,$5A,$5B,$5B,$5B,$5C,$5C,$5C,$5D
                    59 5A 5A 5B 5B 5B 
                    5C 5C 5C 5D 
     568/    10C8 : 5D 5E 5E 5E 5F 5F   	fcb	$5D,$5E,$5E,$5E,$5F,$5F,$60,$60,$60,$61,$61,$62,$62,$62,$63,$63
                    60 60 60 61 61 62 
                    62 62 63 63 
     569/    10D8 :                     
     570/    10D8 : 00 00 01 00 04 00   sqrtbl: fdb	$0000,$0001,$0004,$0009,$0010,$0019,$0024,$0031
                    09 00 10 00 19 00 
                    24 00 31 00 
     571/    10E8 : 40 00 51 00 64 00   	fdb	$0040,$0051,$0064,$0079,$0090,$00A9,$00C4,$00E1
                    79 00 90 00 A9 00 
                    C4 00 E1 00 
     572/    10F8 : 00 01 21 01 44 01   	fdb	$0100,$0121,$0144,$0169,$0190,$01B9,$01E4,$0211
                    69 01 90 01 B9 01 
                    E4 01 11 02 
     573/    1108 : 40 02 71 02 A4 02   	fdb	$0240,$0271,$02A4,$02D9,$0310,$0349,$0384,$03C1
                    D9 02 10 03 49 03 
                    84 03 C1 03 
     574/    1118 : 00 04 41 04 84 04   	fdb	$0400,$0441,$0484,$04C9,$0510,$0559,$05A4,$05F1
                    C9 04 10 05 59 05 
                    A4 05 F1 05 
     575/    1128 : 40 06 91 06 E4 06   	fdb	$0640,$0691,$06E4,$0739,$0790,$07E9,$0844,$08A1
                    39 07 90 07 E9 07 
                    44 08 A1 08 
     576/    1138 : 00 09 61 09 C4 09   	fdb	$0900,$0961,$09C4,$0A29,$0A90,$0AF9,$0B64,$0BD1
                    29 0A 90 0A F9 0A 
                    64 0B D1 0B 



     577/    1148 : 40 0C B1 0C 24 0D   	fdb	$0C40,$0CB1,$0D24,$0D99,$0E10,$0E89,$0F04,$0F81
                    99 0D 10 0E 89 0E 
                    04 0F 81 0F 
     578/    1158 : 00 10 81 10 04 11   	fdb	$1000,$1081,$1104,$1189,$1210,$1299,$1324,$13B1
                    89 11 10 12 99 12 
                    24 13 B1 13 
     579/    1168 : 40 14 D1 14 64 15   	fdb	$1440,$14D1,$1564,$15F9,$1690,$1729,$17C4,$1861
                    F9 15 90 16 29 17 
                    C4 17 61 18 
     580/    1178 : 00 19 A1 19 44 1A   	fdb	$1900,$19A1,$1A44,$1AE9,$1B90,$1C39,$1CE4,$1D91
                    E9 1A 90 1B 39 1C 
                    E4 1C 91 1D 
     581/    1188 : 40 1E F1 1E A4 1F   	fdb	$1E40,$1EF1,$1FA4,$2059,$2110,$21C9,$2284,$2341
                    59 20 10 21 C9 21 
                    84 22 41 23 
     582/    1198 : 00 24 C1 24 84 25   	fdb	$2400,$24C1,$2584,$2649,$2710,$27D9,$28A4,$2971
                    49 26 10 27 D9 27 
                    A4 28 71 29 
     583/    11A8 : 40 2A 11 2B E4 2B   	fdb	$2A40,$2B11,$2BE4,$2CB9,$2D90,$2E69,$2F44,$3021
                    B9 2C 90 2D 69 2E 
                    44 2F 21 30 
     584/    11B8 : 00 31 E1 31 C4 32   	fdb	$3100,$31E1,$32C4,$33A9,$3490,$3579,$3664,$3751
                    A9 33 90 34 79 35 
                    64 36 51 37 
     585/    11C8 : 40 38 31 39 24 3A   	fdb	$3840,$3931,$3A24,$3B19,$3C10,$3D09,$3E04,$3F01
                    19 3B 10 3C 09 3D 
                    04 3E 01 3F 
     586/    11D8 : 00 40 01 41 04 42   	fdb	$4000,$4101,$4204,$4309,$4410,$4519,$4624,$4731
                    09 43 10 44 19 45 
                    24 46 31 47 
     587/    11E8 : 40 48 51 49 64 4A   	fdb	$4840,$4951,$4A64,$4B79,$4C90,$4DA9,$4EC4,$4FE1
                    79 4B 90 4C A9 4D 
                    C4 4E E1 4F 
     588/    11F8 : 00 51 21 52 44 53   	fdb	$5100,$5221,$5344,$5469,$5590,$56B9,$57E4,$5911
                    69 54 90 55 B9 56 
                    E4 57 11 59 
     589/    1208 : 40 5A 71 5B A4 5C   	fdb	$5A40,$5B71,$5CA4,$5DD9,$5F10,$6049,$6184,$62C1
                    D9 5D 10 5F 49 60 
                    84 61 C1 62 
     590/    1218 : 00 64 41 65 84 66   	fdb	$6400,$6541,$6684,$67C9,$6910,$6A59,$6BA4,$6CF1
                    C9 67 10 69 59 6A 
                    A4 6B F1 6C 
     591/    1228 : 40 6E 91 6F E4 70   	fdb	$6E40,$6F91,$70E4,$7239,$7390,$74E9,$7644,$77A1
                    39 72 90 73 E9 74 
                    44 76 A1 77 
     592/    1238 : 00 79 61 7A C4 7B   	fdb	$7900,$7A61,$7BC4,$7D29,$7E90,$7FF9,$8164,$82D1
                    29 7D 90 7E F9 7F 
                    64 81 D1 82 
     593/    1248 : 40 84 B1 85 24 87   	fdb	$8440,$85B1,$8724,$8899,$8A10,$8B89,$8D04,$8E81
                    99 88 10 8A 89 8B 
                    04 8D 81 8E 
     594/    1258 : 00 90 81 91 04 93   	fdb	$9000,$9181,$9304,$9489,$9610,$9799,$9924,$9AB1
                    89 94 10 96 99 97 
                    24 99 B1 9A 
     595/    1268 : 40 9C D1 9D 64 9F   	fdb	$9C40,$9DD1,$9F64,$A0F9,$A290,$A429,$A5C4,$A761
                    F9 A0 90 A2 29 A4 
                    C4 A5 61 A7 
     596/    1278 : 00 A9 A1 AA 44 AC   	fdb	$A900,$AAA1,$AC44,$ADE9,$AF90,$B139,$B2E4,$B491
                    E9 AD 90 AF 39 B1 
                    E4 B2 91 B4 



     597/    1288 : 40 B6 F1 B7 A4 B9   	fdb	$B640,$B7F1,$B9A4,$BB59,$BD10,$BEC9,$C084,$C241
                    59 BB 10 BD C9 BE 
                    84 C0 41 C2 
     598/    1298 : 00 C4 C1 C5 84 C7   	fdb	$C400,$C5C1,$C784,$C949,$CB10,$CCD9,$CEA4,$D071
                    49 C9 10 CB D9 CC 
                    A4 CE 71 D0 
     599/    12A8 : 40 D2 11 D4 E4 D5   	fdb	$D240,$D411,$D5E4,$D7B9,$D990,$DB69,$DD44,$DF21
                    B9 D7 90 D9 69 DB 
                    44 DD 21 DF 
     600/    12B8 : 00 E1 E1 E2 C4 E4   	fdb	$E100,$E2E1,$E4C4,$E6A9,$E890,$EA79,$EC64,$EE51
                    A9 E6 90 E8 79 EA 
                    64 EC 51 EE 
     601/    12C8 : 40 F0 31 F2 24 F4   	fdb	$F040,$F231,$F424,$F619,$F810,$FA09,$FC04,$FE01
                    19 F6 10 F8 09 FA 
                    04 FC 01 FE 
     602/    12D8 :                     
     603/    12D8 : 00 01 02 03 04 05   bcdtbl:	fcb	$00,$01,$02,$03,$04,$05,$06,$07,$08,$09
                    06 07 08 09 
     604/    12E2 : 10 11 12 13 14 15   	fcb	$10,$11,$12,$13,$14,$15,$16,$17,$18,$19
                    16 17 18 19 
     605/    12EC : 20 21 22 23 24 25   	fcb	$20,$21,$22,$23,$24,$25,$26,$27,$28,$29
                    26 27 28 29 
     606/    12F6 : 30 31 32 33 34 35   	fcb	$30,$31,$32,$33,$34,$35,$36,$37,$38,$39
                    36 37 38 39 
     607/    1300 : 40 41 42 43 44 45   	fcb	$40,$41,$42,$43,$44,$45,$46,$47,$48,$49
                    46 47 48 49 
     608/    130A : 50 51 52 53 54 55   	fcb	$50,$51,$52,$53,$54,$55,$56,$57,$58,$59
                    56 57 58 59 
     609/    1314 : 60 61 62 63 64 65   	fcb	$60,$61,$62,$63,$64,$65,$66,$67,$68,$69
                    66 67 68 69 
     610/    131E : 70 71 72 73 74 75   	fcb	$70,$71,$72,$73,$74,$75,$76,$77,$78,$79
                    76 77 78 79 
     611/    1328 : 80 81 82 83 84 85   	fcb	$80,$81,$82,$83,$84,$85,$86,$87,$88,$89
                    86 87 88 89 
     612/    1332 : 90 91 92 93 94 95   	fcb	$90,$91,$92,$93,$94,$95,$96,$97,$98,$99
                    96 97 98 99 
     613/    133C :                     
     614/    133C :                     ; data
     615/    133C :                     
     616/    133C :                     mp_a:	
     617/    14DE :                     	org	*+bin_len*2
     618/    14DE :                     mp_b:	
     619/    1680 :                     	org	*+bin_len*2
     620/    1680 :                     mp_x:	
     621/    1822 :                     	org	*+bin_len*2
     622/    1822 :                     mp_y:	
     623/    19C4 :                     	org	*+bin_len*2
     624/    19C4 :                     
     625/    19C4 :                     end:
     626/    19C4 :                     



  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :              k8-OSX - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  1 - |
*CONSTPI :        3.141592653589793 - | *DATE :                    8/6/2014 - |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - | *LISTON :                         1 - |
*MACEXP :                         1 - | *MOMCPU :                     65816 - |
*MOMCPUNAME :                 65816 - | *NESTMAX :                      100 - |
*PACKING :                        0 - | *PADDING :                        1 - |
*RELAXED :                        0 - | *TIME :                    20:05:13 - |
*TRUE :                           1 - | *VERSION :                     142F - |
 __forw0 :                      9E0 C |  __forw1 :                      9FC C |
 __forw10 :                     AC1 C |  __forw11 :                     AD2 C |
 __forw12 :                     AD7 C |  __forw13 :                     E1A C |
 __forw14 :                     E38 C |  __forw15 :                     E3F C |
 __forw16 :                     E58 C |  __forw17 :                     E7E C |
 __forw18 :                     EC5 C |  __forw19 :                     ECF C |
 __forw2 :                      A1C C |  __forw3 :                      A34 C |
 __forw4 :                      A4A C |  __forw5 :                      A62 C |
 __forw6 :                      A78 C |  __forw7 :                      A8D C |
 __forw8 :                      AA2 C |  __forw9 :                      AB4 C |
 add_mp :                       A12 C |  asl_mp :                       A6E C |
 atan_mp :                      97B C |  atan_mp_end :                  9EF C |
 atan_mp_loop :                 9A8 C |  bcd_len :                      1F4 - |
 bcdtbl :                      12D8 C |  bin_end :                       D0 - |
 bin_len :                       D1 - |  carry_mp :                       4 - |
 cout :                        FDED - |  crout :                       FD8E - |
 d0 :                           ADA C |  d1 :                           BA8 C |
 d2 :                           C76 C |  d3 :                           D44 C |
 dec_len :                      3E8 - |  div_mp :                       A98 C |
 dividend :                     814 - |  divisor :                      818 - |
 dlength :                        2 - |  dp :                           800 - |
*end :                         19C4 C |  m100hi :                       FD8 C |
 m100lo :                       ED8 C | *main :                         900 C |
 mp_a :                        133C C |  mp_b :                        14DE C |
 mp_x :                        1680 C |  mp_y :                        1822 C |
 n :                            820 - |  pi :                           93B C |
 pitext :                       926 C |  prbyte :                      FDDA - |
 print :                        EBD C |  print_mp :                     E1C C |
 print_mp1 :                    E48 C |  ptr :                          810 - |
 ptr_0 :                          0 - |  ptr_a :                        822 - |
 ptr_mp :                       812 - |  regx :                         830 - |
*regy :                         82E - |  set_mp :                       9F0 C |
 sqrtbl :                      10D8 C |  sub_mp :                       A40 C |
 unrollc :                       35 - |  warm :                        FF69 - |
 x2 :                           832 - |

     97 symbols
     31 unused symbols




  defined macros:
  ---------------

div16                                 | m100                                 
madd                                  | masl                                 
matan                                 | mcopy                                
mdiv                                  | mprint                               
mset                                  | msub                                 

     10 macros




  codepages:
  ----------

STANDARD (0 changed characters)




  space used in CODE :
  --------------------

900-133B           


0.02 seconds assembly time

    626 lines source file
   1229 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
